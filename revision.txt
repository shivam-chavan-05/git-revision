git-scm.com

üîÅ What is Version Control (also called Source Control)?
Version Control is a system that records changes to files over time so you can recall specific versions later.

Why it‚Äôs useful:

Tracks who changed what and when.

Helps undo mistakes or bugs by reverting to previous versions.

Makes collaboration across teams efficient (especially in software projects).

Maintains a full history of the project.

üîß What is Git?
Git is a distributed version control system created by Linus Torvalds in 2005. It is the most widely used system for managing source code today.

Key points:

It's local-first: you don‚Äôt need an internet connection to track changes.

Fast, flexible, and efficient for branching, merging, and reverting code.

All commits and branches are stored in your local .git directory.

‚òÅÔ∏è What is GitHub?
GitHub is a web-based hosting service for Git repositories. Think of it as a remote backup and collaboration platform for your Git-managed code.

With GitHub, you can:

Share code with others (open-source or private).

Collaborate with pull requests and code reviews.

Track issues, tasks, and documentation in one place.

Automate testing/deployment using GitHub Actions.

Other alternatives: GitLab, Bitbucket, Azure Repos.

‚úÖ Important Git Topics You Must Know (with explanations)
1. Repository (repo)
A project folder managed by Git. It can be local (on your machine) or remote (on GitHub).

git init creates a new Git repo locally.

2. Git Workflow (3 Stages)
Working Directory: Your current files.

Staging Area (Index): Files marked for commit.

Repository (HEAD): Committed history.

bash
Copy
Edit
git add file.js    # Stage changes
git commit -m "message"  # Save staged changes to history
3. Common Git Commands
Command	What it Does
git status	Shows what's changed and what's staged
git add <file>	Adds changes to the staging area
git commit -m "message"	Saves changes to the local repo
git log	Shows commit history
git diff	Shows what's changed in unstaged files
git clone <url>	Creates a local copy of a remote repo
git pull	Fetch + merge from remote to local
git push	Send commits from local to remote (e.g., GitHub)

4. Branches
Used to develop features or fixes in isolation.

The main (or master) branch is usually the production-ready code.

bash
Copy
Edit
git branch new-feature      # create branch
git checkout new-feature    # switch to it
# or: git switch -c new-feature
Merge it later:

bash
Copy
Edit
git checkout main
git merge new-feature
5. Merging and Conflicts
When two branches modify the same part of a file, Git can't decide which one to keep. This is a merge conflict.

You‚Äôll need to manually resolve it, test, and commit.

6. Remote Repositories
Use git remote add origin <URL> to link a local repo to a remote one.

git push -u origin main pushes your code and sets upstream.

7. .gitignore File
Lists files/folders Git should ignore.

txt
Copy
Edit
node_modules/
.env
.DS_Store
8. Undoing Changes
Task	Command
Unstage file	git reset file.js
Revert commit	git revert <commit-hash>
Discard local changes	git checkout -- file.js
Full reset	git reset --hard HEAD

9. Pull Requests (on GitHub)
Request to merge one branch into another (e.g., feature ‚Üí main)

Team can review changes, comment, and approve or reject

Essential in collaborative workflows

10. Tagging and Releases
Used to mark release points like v1.0.0

bash
Copy
Edit
git tag v1.0.0
git push origin v1.0.0
üìå Summary
Concept	Description
Git	Local version control tool
GitHub	Cloud hosting for Git repos
Version Control	System to track and manage code changes
Branching	Allows parallel feature development
Staging	Intermediate area to prepare commits
Pull/Push	Syncing local and remote repos
Merge	Combine two branches
Conflicts	Manual resolution of overlapping changes